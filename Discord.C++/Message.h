#pragma once
#include <iostream>

#include "DiscordObject.h"

#ifdef _WIN32
#define DLL_EXPORT __declspec(dllexport)
#else
#define DLL_EXPORT
#endif

namespace DiscordCPP {

	using namespace std;
	using namespace web::json;
	using namespace utility;

	namespace MessageType {
		enum MessageType {
			DEFAULT,
			RECIPIENT_ADD,
			RECIPIENT_REMOVE,
			CALL,
			CHANNEL_NAME_CHANGE,
			CHANNEL_ICON_CHANGE,
			CHANNEL_PINNED_MESSAGE,
			GUILD_MEMBER_JOIN
		};
	}

	class User;
	class TextChannel;
	class Embed;

	class Message : public DiscordObject {
	public:
		///the channel the message was sent in
		TextChannel* channel = NULL;
		///The author of this message
		User* author = NULL;
		///The content of this message
		string content;
		//ISO8601 timestamp
		///when the message was created
		string timestamp;
		//ISO8601 timestamp
		///when the message was edited
		string edited_timestamp;
		///true, if this is a tts message
		bool tts;
		///true, if everyone is mentioned
		bool mention_everyone;
		///array of mentioned users
		vector<User*> mentions;
		//vector<Role> mention_roles;
		//vector<Attachments> attachments;
		///Array of embeds
		vector<Embed*> embeds;
		//vector<Reaction> reactions;
		///true, if this message has been pinned
		bool pinned;
		///the webhook id, if the message was generated by a webhook
		string webhook_id;	//snowflake
		///the type of the messsage
		int type;
		//MessageAcivity activity;
		//MessageApplication application;

		DLL_EXPORT Message(const value& data, const string_t& token);
		DLL_EXPORT Message(const Message& old);
		DLL_EXPORT Message();
		DLL_EXPORT ~Message();

		///Edit this message
		DLL_EXPORT Message edit(const string& content);
		///Delete this message
		DLL_EXPORT void delete_msg();
	};

}
